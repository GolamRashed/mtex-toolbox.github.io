@startuml

class vector3d{
 [[/files/doc/vector3d_index.html]]
 +x,y,z: double
 +antipodal: logical
}

class Miller{
 +CS: crystalSymmetry[[crystalSymmetry_index.html]]
 -h,k,l: double
 -u,v,w: double
}

together {
 abstract class symmetry{
 +id: integer
 -lattice: string
 -pointGroup: string
 -isLaue: logical
 -isProper: logical
 }
 class crystalSymmetry {
 [[crystalSymmetry_index.html]]
 +axes: vector3d[[/files/doc/vector3d_index.html]]
 +mineral: string
 +color: RGB
 +alpha, beta, gamma: double
 +aAxis, bAxis, cAxis: vector3d[[/files/doc/vector3d_index.html]]
 +aAxisRec, bAxisRec, cAxisRec: vector3d[[/files/doc/vector3d_index.html]]
 }
 class specimenSymmetry
}

together {

class quaternion {
 [[/files/doc/quaternion_index.html]]
 +a,b,c,d: double
}

class rotation{
 [[/files/doc/rotation_index.html]]
 +i: logical
 -phi1,Phi,phi2: double
}

class orientation{
 [[/files/doc/orientation_index.html]]
 +CS: crystalSymmetry
 +SS: specimenSymmetry
 +antipodal: logical
}
}
quaternion <|- rotation
rotation <|- orientation

rotation <|-down- symmetry
symmetry <|- specimenSymmetry
crystalSymmetry -|> symmetry


vector3d <|- Miller

class slipSystem{
 [[/files/doc/slipSystem_index.html]]
 +b: Miller [[/files/doc/Miller_index.html]]
 +n: Miller [[/files/doc/Miller_index.html]]
 +CRSS: double
 -CS: crystalSymmetry
}

class fibre{
 [[/files/doc/fibre_index.html]]
 +o1: orientation
 +o2: orientation
 +h: Miller
 -r: vector3d
 -CS: crystalSymmetry
 -SS: specimenSymmetry
}

class S2Grid {
 +resolution: double
}
class SO3Grid {
 +resolution: double
}

class sphericalRegion {
 [[/files/doc/sphericalRegion_index.html]]
 +N: vector3d
 +alpha: double
 +antipodal: logical
}

class orientationRegion {
 [[/files/doc/orientationRegion_index.html]]
 +N: orientation
 +V: orientation
 +F:
 +antipodal: logical
}

crystalSymmetry --> sphericalRegion :> fundamentalSector()
crystalSymmetry --> orientationRegion :> fundamentalRegion()
crystalSymmetry --> slipSystem :> fcc(), bcc(), hcp()

sphericalRegion --> S2Grid :> plotS2Grid()
orientationRegion -right-> SO3Grid :> plotSO3Grid()
orientationRegion -right-> SO3Grid :> equispacedSO3Grid()

S2Grid -|> vector3d
SO3Grid -|> orientation

orientation --> fibre :> fibre(o1,o2)


@enduml

slipSymstem -- Miller


orientation -- symmetry : < CS, SS
crystalSymmetry -- Miller : < CS
crystalSymmetry <- vector3d :< a,b,c
package "geometry"{